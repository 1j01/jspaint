// Copyright (c) 2011-2022 GitHub Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

const ChildProcess = require('child_process');

// Spawn a command and invoke the callback when it completes with an error
// and the output from standard out.
//
// * `command`    The underlying OS command {String} to execute.
// * `args` (optional) The {Array} with arguments to be passed to command.
// * `callback` (optional) The {Function} to call after the command has run. It will be invoked with arguments:
//   * `error` (optional) An {Error} object returned by the command, `null` if no error was thrown.
//     * `code` Error code returned by the command.
//     * `stdout`  The {String} output text generated by the command.
//   * `stdout`  The {String} output text generated by the command.
exports.spawn = function (command, args, callback) {
	let error;
	let spawnedProcess;
	let stdout = '';

	try {
		spawnedProcess = ChildProcess.spawn(command, args);
	} catch (error) {
		process.nextTick(() => callback && callback(error, stdout));
		return;
	}

	spawnedProcess.stdout.on('data', data => {
		stdout += data;
	});
	spawnedProcess.on('error', processError => {
		error = processError;
	});
	spawnedProcess.on('close', (code, signal) => {
		if (!error && code !== 0) {
			error = new Error(`Command failed: ${signal != null ? signal : code}`);
		}

		if (error) {
			if (error.code == null) error.code = code;
			if (error.stdout == null) error.stdout = stdout;
		}

		callback && callback(error, stdout);
	});

	// This is necessary if using Powershell 2 on Windows 7 to get the events to raise
	// http://stackoverflow.com/questions/9155289/calling-powershell-from-nodejs
	return spawnedProcess.stdin.end();
};
